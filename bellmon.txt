#include <bits/stdc++.h>
using namespace std;

int main() {
    int v, e;
    cout << "Enter number of vertices and edges: " << endl;
    cin >> v >> e;
    
    vector<vector<int>> graph; // Stores edges as {u, v, w}
    int dist[v];
    
    // Initialize distances from source (vertex 0) to other vertices
    dist[0] = 0;
    for (int i = 1; i < v; i++)
        dist[i] = INT_MAX;
    
    // Input each edge
    for (int i = 0; i < e; i++) {
        int u, v, w;
        cout << "Enter source, destination and weight of edge " << i+1 << endl;
        cin >> u >> v >> w;
        graph.push_back({u, v, w});
    }
    
    // Bellman-Ford relaxation for v-1 times
    for (int i = 0; i < v - 1; i++) {
        for (auto edge : graph) {
            int u = edge[0];
            int v = edge[1];
            int w = edge[2];
            
            // Relax the edge if possible
            if (dist[u] != INT_MAX && dist[u] + w < dist[v]) {
                dist[v] = dist[u] + w;
            }
        }
    }
    
    // Check for negative weight cycles
    for (auto edge : graph) {
        int u = edge[0];
        int v = edge[1];
        int w = edge[2];
        
        if (dist[u] != INT_MAX && dist[u] + w < dist[v]) {
            cout << "Negative Cycle Detected" << endl;
            return 0;
        }
    }
    
    // Output the shortest distances
    for (int i = 0; i < v; i++) {
        if (dist[i] == INT_MAX)
            cout << "Vertex " << i << " is unreachable from source." << endl;
        else
            cout << "Distance of vertex " << i << " from source is " << dist[i] << endl;
    }
    
    return 0;
}