#include<iostream>
using namespace std;

// Function to solve the fractional knapsack problem
void knapsack(int n, float weight[], float profit[], int capacity) 
{
    float t_profit = 0.0;  // Initialize the total profit
    float x;  // Fraction of the item to be taken

    // Loop through all the items (after sorting)
    for (int i = 0; i < n; i++) 
    {
        if (capacity == 0) break;  // No more capacity left

        if (weight[i] <= capacity) 
        {
            // If the item can be fully taken
            t_profit += profit[i];
            capacity -= weight[i];
        } 
        else 
        {
            // If the item can be partially taken
            x = (float)capacity / weight[i];
            t_profit += profit[i] * x;
            capacity = 0;  // All capacity is used up
        }
    }

    // Output the total profit
    cout << "Maximum profit: " << t_profit << endl;
}

int main() 
{
    float profit[30];
    float weight[30];
    float ratio[30];
    float temp;
    int capacity, n;

    cout << "Enter the number of objects: ";
    cin >> n;

    // Input profit and weight for each object
    for (int i = 0; i < n; i++) 
    {
        cout << "Enter profit and weight for object " << i + 1 << ": ";
        cin >> profit[i] >> weight[i];
    }

    cout << "Enter the capacity of the knapsack: ";
    cin >> capacity;

    // Find the p/w ratio for each item
    for (int i = 0; i < n; i++) 
    {
        ratio[i] = profit[i] / weight[i];
    }

    // Sort items based on the profit-to-weight ratio in decreasing order
    for (int i = 0; i < n - 1; i++) 
    {
        for (int j = i + 1; j < n; j++) 
        {
            if (ratio[i] < ratio[j]) 
            {
                // Swap the ratios
                temp = ratio[i];
                ratio[i] = ratio[j];
                ratio[j] = temp;

                // Swap the corresponding weights and profits as well
                temp = weight[i];
                weight[i] = weight[j];
                weight[j] = temp;

                temp = profit[i];
                profit[i] = profit[j];
                profit[j] = temp;
            }
        }
    }

    // Call the knapsack function to calculate the maximum profit
    knapsack(n, weight, profit, capacity);

    return 0;
}