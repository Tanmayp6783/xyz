[1]import pandas as pd

[2]data=pd.read_csv('/content/Mall_Customers.csv')

[3]print(data.isnull().sum())

[4]print(data)

[5]import matplotlib.pyplot as plt
   import seaborn as sns
   import numpy as np

 [6]: from sklearn.preprocessing import LabelEncoder
      from sklearn import metrics

[7]: encoder=LabelEncoder()

 [8]: data['Genre']=encoder.fit_transform(data['Genre'])
       

[9]: df=data.copy()
     x=df.iloc[:,[2,1]]

[10]: from sklearn.cluster import KMeans
      wcss=[]
      for i in range(1,6):
      kmeans=KMeans(n_clusters=i,init='k-means++',random_state=42)
      kmeans.fit(x)
      wcss.append(kmeans.inertia_)
      print("wcss:",wcss)

[11]: plt.plot(range(1,6),wcss,marker='*')
      plt.title('the elbow method')
      plt.xlabel('number of clusters')
      plt.ylabel('wcss')
      plt.show()


[12]: kmeans=KMeans(n_clusters=4,random_state=42)
      kmeans.fit(x)
      y=kmeans.fit_predict(x)
      df["lable"]=y

[13]: df.head()

[14]: unique_clusters=df['lable'].unique()

[15]: for cluster in unique_clusters:
cluster_data=df[df['lable']==cluster]

plt.scatter(cluster_data['Age'],cluster_data['Annual Income‚ê£(k$)'],label=f'cluster{cluster}')
centroids=[]
for cluster in unique_clusters:
cluster_data=df[df['lable']==cluster]
centroid=[cluster_data['Age'].mean(),cluster_data['Annual Income (k$)'].mean()]
centroids.append(centroid)
centroids=np.array(centroids)
plt.scatter(centroids[:,0],centroids[:,1],c="black",s=500,alpha=0.5,marker='.',label='centroids')
plt.title('clusters of customers with centroid')
plt.xlabel('age')
plt.ylabel('annual income (k$)')
plt.legend()
plt.grid()
plt.show()


[16]: from sklearn.metrics import silhouette_score
      score=silhouette_score(x,y)
      print("silhouette score:",score)

[17]: ytrain_km=kmeans.fit_predict(x)
      ytest_km=kmeans.predict(x)

[18]: from sklearn.metrics import adjusted_rand_score
      acc_train=adjusted_rand_score(y,ytrain_km)
      acc_test=adjusted_rand_score(y,ytest_km)
      print("kmean: accuracy on training data:",format(acc_train))
      print("kmean: accuracy on testing data:",format(acc_test))

[19]: import scipy.cluster.hierarchy as sch
      dendrogram=sch.dendrogram(sch.linkage(x,method='ward'))
      plt.title('dendrogram')
      plt.xlabel('customers')
      plt.ylabel('euclidean distance')
      plt.show()

[20]: !pip install scikit-learn

[21]: silhouette_scores=[]
      n_clusters_range=range(2,11)
      for n_clusters in n_clusters_range:
      kmeans=KMeans(n_clusters=n_clusters)
      cluster_labels=kmeans.fit_predict(x)
      score=silhouette_score(x,cluster_labels)
      silhouette_scores.append(score)

[22]: #plot the results
      plt.plot(n_clusters_range,silhouette_scores,marker='o')
      plt.title('silhouette score vs number of clusters')
      plt.xlabel('number of clusters')
      plt.ylabel('silhouette score')
      plt.show()







